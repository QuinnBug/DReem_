import csv
from collections import namedtuple
from operator import itemgetter

import requests

# ensure none of these ranges import too much data
geographys = ["1811939329...1811939332",
              "1811939334...1811939336",
              "1811939338...1811939368",
              "1811939369...1811939398",
              "1811939399...1811939428",
              "1811939436...1811939442",
              "1811939768",
              "1811939769",
              "1811939443...1811939472",
              "1811939473...1811939497",
              "1811939499...1811939501",
              "1811939503",
              "1811939505...1811939507",
              "1811939509...1811939517",
              "1811939519",
              "1811939520",
              "1811939524...1811939540",
              "1811939541...1811939570",
              "1811939575...1811939599",
              "1811939601...1811939628",
              "1811939630...1811939634",
              "1811939636...1811939647",
              "1811939649",
              "1811939655...1811939664",
              "1811939667...1811939680",
              "1811939682",
              "1811939683",
              "1811939685",
              "1811939687...1811939704",
              "1811939707",
              "1811939708",
              "1811939710",
              "1811939712...1811939717",
              "1811939719",
              "1811939720",
              "1811939722...1811939730"]

# geography = "1807745025...1807745028,1807745030...1807745032,1807745034...1807745083,1807745085,1807745282,1807745283,1807745086...1807745155,1807745157...1807745164,1807745166...1807745170,1807745172...1807745177,1807745179...1807745194,1807745196,1807745197,1807745199,1807745201...1807745218,1807745221,1807745222,1807745224,1807745226...1807745231,1807745233,1807745234,1807745236...1807745244"
# industries = "134235929,134243838,134243848,134243928,134244029,134244037,134244128,134244528,134249848,134249858,134249928,134264238,134264248,134265358,134272828,134272929,134272930,134272937,134273028,134273628,134273829,134273830,134273938,134274029,134274030,134275838,134275848,134275858,134275869,134275870,134275918,134275938,134276018,134276839...134276841,134276848,134276859,134276861,134276868,134276928,134277828,134277928,134278828,134278928,134279028,134279628,134279739,134279748,134279758,134279818,134280838,134280848,134281638,134281718,134285930,134287938,134288839,134290838,134290848,134291828,134291929,134291930,134291937,134292028,134294838,134294938,134294948,134295019,134295069,134295079,134296838,134296848,134297629,134297637,134303238,134303248,134307738,134307748,134307758,134307768,134308739,134308740,134308748,134308758,134308768,134309728,134310838,134310848,134310858,134310927,134310938,134311018,134312838,134312848"

industries = "134218728,134218838,134218848,134218858,134218868,134218878,134218888,134218918,134218938,134218948," \
             "134218958,134218968,134218978,134218988,134218998,134219008,134219018,134219028,134219138,134219148," \
             "134219158,134219168,134219178,134219188,134219198,134219218,134219228,134219338,134219349,134219357," \
             "134219358,134219368,134219428,134219828,134219928,134220028,134220128,134220838,134220848,134220938," \
             "134220948,134222829,134222830,134222928,134223828,134223928,134224828,134224938,134225018,134225838," \
             "134225848,134226638,134226648,134226658,134226718,134226828,134227628,134227838,134227848,134227858," \
             "134227928,134228038,134228048,134228118,134228138,134228148,134228239,134228240,134228247,134228248," \
             "134228339,134228340,134228348,134228438,134228448,134228458,134228538,134228549,134228550,134228559," \
             "134228560,134228568,134228578,134228588,134228618,134228638,134228648,134228738,134228748,134228758," \
             "134228768,134228778,134228788,134228798,134229728,134230828,134230928,134231028,134231638," \
             "134231649...134231651,134231659,134231667,134231668,134231678,134231688,134231718,134231838,134231848," \
             "134231859,134231860,134231869,134231870,134231918,134231928,134232038,134232118,134232838,134232848," \
             "134232928,134233828,134233938,134233948,134233958,134233968,134234018,134234838,134234848,134234939," \
             "134234947,134234948,134234958,134234968,134235018,134235838,134235849,134235857,134235858,134235868," \
             "134235929...134235931,134236828,134236929,134236937,134237838,134237848,134237858,134237868,134237878," \
             "134237888,134237898,134237928,134238029,134238030,134238139,134238140,134238148,134238238,134238248," \
             "134238258,134238318,134238328,134238828,134238928,134239838,134239918,134239938,134239948,134239958," \
             "134240018,134240838,134240848,134240858,134240868,134240918,134240928,134241038,134241048,134241138," \
             "134241148,134241158,134241168,134241218,134241238,134241248,134241338,134241348,134241358,134241368," \
             "134241378,134241418,134241428,134241638,134241718,134241828,134241928,134242038,134242048,134242058," \
             "134242068,134242138,134242148,134242158,134242168,134242178,134242188,134242238,134242248,134242258," \
             "134242268,134242838,134242848,134242938,134243018,134243028,134243128,134243228,134243338,134243348," \
             "134243438,134243448,134243458,134243638,134243648,134243658,134243668,134243718,134243838,134243848," \
             "134243928,134244029,134244037,134244128,134244239...134244242,134244248,134244328,134244429,134244430," \
             "134244528,134244838,134244848,134244928,134245038,134245048,134245058,134245128,134245238,134245248," \
             "134245628,134245838,134245848,134245859,134245860,134245868,134245878,134245938,134245948,134245958," \
             "134245968,134245978,134246018,134246029,134246030,134246138,134246218,134246638,134246649...134246651," \
             "134246658,134246668,134246678,134246688,134246718,134246828,134246929...134246931,134247038,134247048," \
             "134247838,134247848,134247928,134248028,134248128,134248638,134248648,134248718,134248738,134248748," \
             "134248758,134248818,134249838,134249848,134249858,134249928,134250028,134250129,134250137,134250228," \
             "134250638,134250718,134250838,134250848,134250858,134250868,134250878,134250888,134250898,134250918," \
             "134250928,134252838,134252848,134252858,134252868,134252938,134252948,134252958,134253028,134253728," \
             "134254728,134255838,134255848,134255938,134255948,134256038,134256048,134256728,134258828,134258929," \
             "134258930,134259838,134259848,134259858,134259938,134259948,134260638,134260718,134260838,134260848," \
             "134260858,134260938,134260948,134261018,134261038,134261048,134261058,134261069,134261070,134261118," \
             "134261638,134261719,134261727,134262839,134262840,134262918,134262928,134263038,134263048,134263128," \
             "134263838,134263848,134263858,134263868,134263878,134263888,134263898,134263908,134263918,134263938," \
             "134263948,134263958,134263968,134264038,134264048,134264058,134264069,134264070,134264078,134264088," \
             "134264098,134264108,134264118,134264138,134264148,134264159,134264167,134264168,134264178,134264188," \
             "134264198,134264208,134264219,134264227,134264238,134264248,134264338,134264348,134264358,134264368," \
             "134264378,134264388,134264418,134264439,134264447,134264448,134264458,134264468,134264478,134264488," \
             "134264498,134264628,134264838,134264918,134264938,134264948,134264958,134264968,134264978,134264988," \
             "134265018,134265028,134265138,134265149,134265157,134265158,134265238,134265248,134265258,134265268," \
             "134265319,134265327,134265338,134265348,134265358,134265368,134265378,134265438,134265449,134265450," \
             "134265458,134265469,134265477,134265478,134265488,134265498,134265509,134265510,134265517,134265519," \
             "134265527,134265538,134265548,134265618,134265638,134265718,134266828,134266928,134267039,134267047," \
             "134267048,134267118,134267138,134267148,134267228,134267828,134267928,134268028,134268128,134268829," \
             "134268830,134268938,134268948,134269829...134269831,134269939...134269941,134269947,134269948," \
             "134269958,134269969...134269971,134270018,134270828,134270929,134270930,134272828,134272929,134272930," \
             "134272937,134273028,134273628,134273829...134273831,134273938,134274018,134274029,134274030,134275838," \
             "134275848,134275858,134275869,134275870,134275918,134275938,134276018,134276839...134276841,134276848," \
             "134276859...134276861,134276868,134276928,134277828,134277928,134278828,134278928,134279028,134279628," \
             "134279739,134279740,134279748,134279758,134279818,134280838,134280848,134281638,134281718,134281838," \
             "134281919,134281920,134281929...134281933,134281937,134282029...134282034,134282638,134282649," \
             "134282650,134282657,134282719,134282720,134282727,134282838,134282848,134282929,134282930,134283028," \
             "134283838,134283848,134283918,134283938,134283948,134284018,134284028,134285828,134285929,134285930," \
             "134285937,134286038,134286048,134286829,134286830,134286837,134286929...134286931,134287828,134287938," \
             "134287949,134287957,134288839,134288840,134288849,134288850,134288857,134288928,134289838,134289918," \
             "134289928,134290838,134290848,134290928,134291828,134291929...134291931,134291937,134292028,134292629," \
             "134292630,134292637,134292728,134294838,134294848,134294938,134294948,134295019,134295027,134295038," \
             "134295048,134295058,134295069,134295070,134295079,134295080,134295118,134295128,134295829,134295837," \
             "134295928,134296028,134296838,134296848,134297629,134297637,134297828,134297928,134298028,134298828," \
             "134298938,134298949...134298951,134298957,134299019,134299027,134299028,134299838,134299918,134299928," \
             "134300029,134300030,134300639,134300640,134300648,134300718,134301838,134301848,134301858,134301938," \
             "134301948,134301958,134301968,134301978,134302028,134302828,134302928,134303038,134303048,134303138," \
             "134303149,134303150,134303238,134303248,134303258,134303318,134303328,134303829,134303830,134303938," \
             "134303948,134303958,134304628,134304828,134304928,134305028,134305628,134305828,134306638,134306718," \
             "134307738,134307748,134307758,134307768,134308739,134308740,134308748,134308758,134308768,134309728," \
             "134310838,134310848,134310858,134310919,134310927,134310938,134311018,134311838,134311848,134311928," \
             "134312638,134312648,134312718,134312838,134312848,134312938,134312948,134312958,134312968,134312978," \
             "134313018,134313738,134313748,134313758,134313768,134313818,134314728,134315828,134315928,134316728"

employees = ["DATE", "DATE_NAME", "DATE_CODE", "DATE_TYPE", "DATE_TYPECODE", "DATE_SORTORDER", "GEOGRAPHY",
             "GEOGRAPHY_NAME", "GEOGRAPHY_CODE", "GEOGRAPHY_TYPE", "GEOGRAPHY_TYPECODE", "GEOGRAPHY_SORTORDER",
             "INDUSTRY", "INDUSTRY_NAME", "INDUSTRY_CODE", "INDUSTRY_TYPE", "INDUSTRY_TYPECODE", "INDUSTRY_SORTORDER",
             "EMPLOYMENT_SIZEBAND", "EMPLOYMENT_SIZEBAND_NAME", "EMPLOYMENT_SIZEBAND_CODE", "EMPLOYMENT_SIZEBAND_TYPE",
             "EMPLOYMENT_SIZEBAND_TYPECODE", "EMPLOYMENT_SIZEBAND_SORTORDER", "LEGAL_STATUS", "LEGAL_STATUS_NAME",
             "LEGAL_STATUS_CODE", "LEGAL_STATUS_TYPE", "LEGAL_STATUS_TYPECODE", "LEGAL_STATUS_SORTORDER", "MEASURES",
             "MEASURES_NAME", "OBS_VALUE", "OBS_STATUS", "OBS_STATUS_NAME", "OBS_CONF", "OBS_CONF_NAME", "URN",
             "RECORD_OFFSET", "RECORD_COUNT "

             ]

turnover = ["DATE", "DATE_NAME", "DATE_CODE", "DATE_TYPE", "DATE_TYPECODE", "DATE_SORTORDER", "GEOGRAPHY",
            "GEOGRAPHY_NAME", "GEOGRAPHY_CODE", "GEOGRAPHY_TYPE", "GEOGRAPHY_TYPECODE", "GEOGRAPHY_SORTORDER",
            "INDUSTRY", "INDUSTRY_NAME", "INDUSTRY_CODE", "INDUSTRY_TYPE", "INDUSTRY_TYPECODE",
            "INDUSTRY_SORTORDER",
            "TURNOVER_SIZEBAND", "TURNOVER_SIZEBAND_NAME", "TURNOVER_SIZEBAND_CODE", "TURNOVER_SIZEBAND_TYPE",
            "TURNOVER_SIZEBAND_TYPECODE",
            "TURNOVER_SIZEBAND_SORTORDER", "LEGAL_STATUS", "LEGAL_STATUS_NAME", "LEGAL_STATUS_CODE",
            "LEGAL_STATUS_TYPE",
            "LEGAL_STATUS_TYPECODE", "LEGAL_STATUS_SORTORDER", "MEASURES", "MEASURES_NAME", "OBS_VALUE", "OBS_STATUS",
            "OBS_STATUS_NAME", "OBS_CONF", "OBS_CONF_NAME", "URN", "RECORD_OFFSET", "RECORD_COUNT"]

idx = namedtuple("indexes",
                 ("local_auth", "sic", "emp_count", "emp_band", "to_count", "to_band", "date"))


def setup_indexes():
    idx.local_auth = employees.index("GEOGRAPHY_NAME")
    idx.sic = employees.index("INDUSTRY_CODE")
    idx.emp_count = employees.index("OBS_VALUE")
    idx.emp_band = employees.index("EMPLOYMENT_SIZEBAND_NAME")
    idx.date = employees.index("DATE")
    idx.to_count = turnover.index("OBS_VALUE")
    idx.to_band = turnover.index("TURNOVER_SIZEBAND_NAME")


def get_date_ranges():
    earliest = 2021
    latest = 2021
    years = []
    for i in range(1 + latest - earliest):
        years.append(earliest + i)

    return years


def fetch_all_data():
    setup_indexes()
    # years = get_date_ranges()
    years = [2021]

    # updating the elist and tlist files
    for year in years:
        refresh_files(year)
        for geo in geographys:
            for i in range(9):
                save_data_from_nomis(year, geo, i, "elist_", True)
            for i in range(11):
                save_data_from_nomis(year, geo, i + 9, "tlist_", True)

    # the good stuff where we do the conversions
    return convert_to_data_csv(years)


def refresh_files(year):
    file = open("elist_" + str(year) + ".csv", "w")
    file.write("")
    file.close()
    file = open("tlist_" + str(year) + ".csv", "w")
    file.write("")
    file.close()


def update_uris(date, geocode):
    # no of employees per sic per local auth - earliest is 2015/latest is 2019
    # no of companies per sic per local auth per turnover band - earliest is 2010/latest is 2020
    uris = []

    # emp sizeband: 1->9
    for i in range(9):
        uris.append("https://www.nomisweb.co.uk/api/v01/dataset/NM_142_1.data.csv?geography=" + geocode + "&" +
                    date + "&industry=" + industries + "&employment_sizeband=" + str(i + 1) +
                    "&legal_status=0&measures=20100")

    # turnover sizeband: 0->10
    for i in range(11):
        uris.append("https://www.nomisweb.co.uk/api/v01/dataset/NM_199_1.data.csv?geography=" + geocode + "&" +
                    date + "&industry=" + industries + "&turnover_sizeband=" + str(i) +
                    "&legal_status=0&measures=20100")

    return uris


def save_data_from_nomis(year, geocode, uri_idx, file_prefix, append):
    date = "date=" + str(year)
    uris = update_uris(date, geocode)

    response = requests.get(uris[uri_idx])

    if response.status_code == 200:
        # write the data to a csv file
        nomis_to_file(file_prefix + str(year) + ".csv", response, append)
    else:
        print(response.status_code)
        return ["NULL", "NULL"]


def convert_to_data_csv(years):
    result = []
    for year in years:
        # read in files as csv
        elist = csv_to_list("elist_" + str(year) + ".csv")
        tlist = csv_to_list("tlist_" + str(year) + ".csv")

        # pair the data up to correct sic/local_auth/employee band
        elist.sort(key=lambda x: x[idx.local_auth] + str(x[idx.sic]))
        tlist.sort(key=lambda x: x[idx.local_auth] + str(x[idx.sic]))

        current = 0
        while current < len(elist):
            # print(len(elist))
            if elist[current][idx.emp_band] == "0 to 4":
                counts = [int(elist[current][idx.emp_count]),
                          int(elist[current + 1][idx.emp_count]),
                          int(elist[current + 2][idx.emp_count]),
                          int(elist[current + 3][idx.emp_count]),
                          int(elist[current + 4][idx.emp_count]),
                          int(elist[current + 5][idx.emp_count]),
                          int(elist[current + 6][idx.emp_count]),
                          int(elist[current + 7][idx.emp_count]),
                          int(elist[current + 8][idx.emp_count])]

                totals = []
                # Mid
                total = counts[0] * 2
                total += counts[1] * 7
                total += counts[2] * 15
                total += counts[3] * 35
                total += counts[4] * 75
                total += counts[5] * 175
                total += counts[6] * 350
                total += counts[7] * 750
                total += counts[8] * 1500
                totals.append(total)
                # Min
                total = counts[0] * 0
                total += counts[1] * 5
                total += counts[2] * 10
                total += counts[3] * 20
                total += counts[4] * 50
                total += counts[5] * 100
                total += counts[6] * 250
                total += counts[7] * 500
                total += counts[8] * 1000
                totals.append(total)
                # Max
                total = counts[0] * 4
                total += counts[1] * 9
                total += counts[2] * 19
                total += counts[3] * 49
                total += counts[4] * 99
                total += counts[5] * 249
                total += counts[6] * 499
                total += counts[7] * 999
                total += counts[8] * 2000
                totals.append(total)

                elist[current] = ["Employees",
                                  elist[current][idx.date], elist[current][idx.local_auth], elist[current][idx.sic],
                                  totals[0], totals[1], totals[2]]
                del elist[current + 1:current + 9]
            current += 1

        for row in elist:
            if row[0] != "Employees":
                continue
            del row[0]

            # row format = 0 date, 1 la, 2 sic, 3 Mid, 4 Min, 5 Max
            found = 0
            i = 0
            indexes = []
            while found < 11 and i < len(tlist):
                col = tlist[i]
                if row[1] == col[idx.local_auth] and row[2] == col[idx.sic]:
                    row.append(col[idx.to_band])
                    row.append(col[idx.to_count])
                    result.append(row)

                    indexes.append(tlist.index(col))
                    found += 1
                i += 1

            if found == 11:
                for i in range(11):
                    del (tlist[indexes[i] - i])
            else:
                print("problem")

    print("e & t list conversion finished")
    return result


def nomis_to_file(filename, response, append):
    content = response.text.splitlines()
    if len(content) == 0:
        print("oof")
    del content[0]

    if append:
        file = open(filename, "a")
    else:
        file = open(filename, "w")

    for line in content:
        line = line.encode(encoding="UTF-8", errors="ignore")
        line = line.decode(encoding="charmap", errors="ignore")
        file.write(line + "\n")

    file.close()


def csv_to_list(filename):
    file = open(filename, newline='', encoding='cp437')
    reader = csv.reader(file, delimiter=',', quotechar='"')

    rows = []
    for line in reader:
        rows.append(line)

    file.close()
    return rows
